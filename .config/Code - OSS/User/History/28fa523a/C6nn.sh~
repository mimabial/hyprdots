#!/usr/bin/env bash
# Main denv installation script
# shellcheck disable=SC2154 (variables are imported from other scripts)

# Display ASCII art logo using a here document
cat <<"EOF"

--------------------------------------------------------
        .
       / \         _       _  _      ___  ___   ___
      /^  \      _| |_    | || |_  _|   \|    |/ _ \
     /  _  \    |_   _|   | __ | || | |) |   <  ___ |
    /  | | ~\     |_|     |_||_|\_, |___/|_|__|_| |_|
   /.-'   '-.\                  |__/
--------------------------------------------------------

EOF

#--------------------------------#
# import variables and functions #
#--------------------------------#

# Get the directory where this script is located
scrDir="$(dirname "$(realpath "$0")")"

# Source (import) the global functions and variables
# shellcheck disable=SC1091 (file path is dynamic)
if ! source "${scrDir}/global_fn.sh"; then
    echo "Error: unable to source global_fn.sh..."
    exit 1
fi

#------------------#
# evaluate options #
#------------------#

# Initialize all feature flags to 0 (disabled)
flg_Install=0      # Install packages flag
flg_Restore=0      # Restore configurations flag
flg_Service=0      # Enable services flag
flg_DryRun=0       # Test mode (don't actually execute) flag
flg_Shell=0        # Re-evaluate shell flag
flg_Nvidia=1       # Handle NVIDIA (enabled by default)
flg_ThemeInstall=1 # Install themes flag

# Process command line options using getopts
# Each letter represents a different option
while getopts idrstmnh: RunStep; do
    case $RunStep in
    i) flg_Install=1 ;;                    # Install packages
    d)  # Install with defaults (no user prompts)
        flg_Install=1
        export use_default="--noconfirm"   # Pass --noconfirm to package managers
        ;;
    r) flg_Restore=1 ;;                    # Restore configurations
    s) flg_Service=1 ;;                    # Enable services
    n)  # Ignore NVIDIA actions
        # shellcheck disable=SC2034
        export flg_Nvidia=0
        print_log -r "[nvidia] " -b "Ignored :: " "skipping Nvidia actions"
        ;;
    h)  # Re-evaluate shell options
        # shellcheck disable=SC2034
        export flg_Shell=0
        print_log -r "[shell] " -b "Reevaluate :: " "shell options"
        ;;
    t) flg_DryRun=1 ;;                     # Test run (don't execute)
    m) flg_ThemeInstall=0 ;;               # Skip theme installation
    *)  # Invalid option or help request
        # Display help message using here document
        cat <<EOF
Usage: $0 [options]
            i : [i]nstall hyprland without configs
            d : install hyprland [d]efaults without configs --noconfirm
            r : [r]estore config files
            s : enable system [s]ervices
            n : ignore/[n]o [n]vidia actions (-irsn to ignore nvidia)
            h : re-evaluate S[h]ell
            m : no the[m]e reinstallations
            t : [t]est run without executing (-irst to dry run all)

NOTE: 
        running without args is equivalent to -irs
        to ignore nvidia, run -irsn

WRONG:
        install.sh -n # This will not work

EOF
        exit 1
        ;;
    esac
done

# Export variables that are used by other scripts
# Create timestamp for this installation session
DENV_LOG="$(date +'%y%m%d_%Hh%Mm%Ss')"
export flg_DryRun flg_Nvidia flg_Shell flg_Install flg_ThemeInstall DENV_LOG

# Handle script behavior when no options are provided
if [ "${flg_DryRun}" -eq 1 ]; then
    print_log -n "[test-run] " -b "enabled :: " "Testing without executing"
elif [ $OPTIND -eq 1 ]; then  # No options provided
    # Default behavior: install, restore, and enable services
    flg_Install=1
    flg_Restore=1
    flg_Service=1
fi

#--------------------#
# pre-install script #
#--------------------#

# Run pre-installation if both install and restore are enabled
if [ ${flg_Install} -eq 1 ] && [ ${flg_Restore} -eq 1 ]; then
    # Display ASCII art for pre-install
    cat <<"EOF"
                _         _       _ _
 ___ ___ ___   |_|___ ___| |_ ___| | |
| . |  _| -_|  | |   |_ -|  _| .'| | |
|  _|_| |___|  |_|_|_|___|_| |__,|_|_|
|_|

EOF

    # Execute pre-installation script
    "${scrDir}/install_pre.sh"
fi

#------------#
# installing #
#------------#

if [ ${flg_Install} -eq 1 ]; then
    # Display ASCII art for installation phase
    cat <<"EOF"

 _         _       _ _ _
|_|___ ___| |_ ___| | |_|___ ___
| |   |_ -|  _| .'| | | |   | . |
|_|_|_|___|_| |__,|_|_|_|_|_|_  |
                            |___|

EOF

    #----------------------#
    # prepare package list #
    #----------------------#
    
    # Get remaining command line arguments after processing options
    # OPTIND-1 tells us how many options were processed
    shift $((OPTIND - 1))
    custom_pkg=$1  # First remaining argument is custom package file
    
    # Start with core package list
    cp "${scrDir}/pkg_core.lst" "${scrDir}/install_pkg.lst"
    
    # Set up cleanup: move package list to logs when script exits
    trap 'mv "${scrDir}/install_pkg.lst" "${cacheDir}/logs/${DENV_LOG}/install_pkg.lst"' EXIT

    # Add marker and append custom packages if provided
    echo -e "\n#user packages" >>"${scrDir}/install_pkg.lst" # Add a marker for user packages
    if [ -f "${custom_pkg}" ] && [ -n "${custom_pkg}" ]; then
        cat "${custom_pkg}" >>"${scrDir}/install_pkg.lst"
    fi

    #--------------------------------#
    # add nvidia drivers to the list #
    #--------------------------------#
    
    # Check if NVIDIA GPU is detected
    if nvidia_detect; then
        # Only add NVIDIA drivers if not explicitly disabled
        if [ ${flg_Nvidia} -eq 1 ]; then
            # Add kernel headers for each installed kernel
            # This reads the pkgbase file for each kernel to get the kernel name
            cat /usr/lib/modules/*/pkgbase | while read -r kernel; do
                echo "${kernel}-headers" >>"${scrDir}/install_pkg.lst"
            done
            # Add appropriate NVIDIA drivers
            nvidia_detect --drivers >>"${scrDir}/install_pkg.lst"
        else
            print_log -warn "Nvidia" "Nvidia GPU detected but ignored..."
        fi
    fi
    
    # Display detected GPUs
    nvidia_detect --verbose

    #----------------#
    # get user prefs #
    #----------------#
    
    echo ""
    
    # Check if an AUR helper is already installed
    if ! chk_list "aurhlpr" "${aurList[@]}"; then
        print_log -c "\nAUR Helpers :: "
        
        # Add binary versions of AUR helpers to the list
        aurList+=("yay-bin" "paru-bin") # Add this here instead of in global_fn.sh
        
        # Display available AUR helpers with numbers
        for i in "${!aurList[@]}"; do  # "${!array[@]}" gives array indices
            print_log -sec "$((i + 1))" " ${aurList[$i]} "
        done

        # Get user choice with timeout
        prompt_timer 120 "Enter option number [default: yay-bin] | q to quit "

        # Process user input
        case "${PROMPT_INPUT}" in
        1) export getAur="yay" ;;
        2) export getAur="paru" ;;
        3) export getAur="yay-bin" ;;
        4) export getAur="paru-bin" ;;
        q)
            print_log -sec "AUR" -crit "Quit" "Exiting..."
            exit 1
            ;;
        *)  # Default case or no input
            print_log -sec "AUR" -warn "Defaulting to yay-bin"
            print_log -sec "AUR" -stat "default" "yay-bin"
            export getAur="yay-bin"
            ;;
        esac
        
        # Verify that an AUR helper was selected
        if [[ -z "$getAur" ]]; then
            print_log -sec "AUR" -crit "No AUR helper found..." "Log file at ${cacheDir}/logs/${DENV_LOG}"
            exit 1
        fi
    fi

    # Check if a shell is already installed and configured
    if ! chk_list "myShell" "${shlList[@]}"; then
        print_log -c "Shell :: "
        
        # Display available shells with numbers
        for i in "${!shlList[@]}"; do
            print_log -sec "$((i + 1))" " ${shlList[$i]} "
        done
        
        # Get user choice with timeout
        prompt_timer 120 "Enter option number [default: zsh] | q to quit "

        # Process user input
        case "${PROMPT_INPUT}" in
        1) export myShell="zsh" ;;
        2) export myShell="fish" ;;
        q)
            print_log -sec "shell" -crit "Quit" "Exiting..."
            exit 1
            ;;
        *)  # Default case or no input
            print_log -sec "shell" -warn "Defaulting to zsh"
            export myShell="zsh"
            ;;
        esac
        
        print_log -sec "shell" -stat "Added as shell" "${myShell}"
        # Add selected shell to package list
        echo "${myShell}" >>"${scrDir}/install_pkg.lst"

        # Verify that a shell was selected
        if [[ -z "$myShell" ]]; then
            print_log -sec "shell" -crit "No shell found..." "Log file at ${cacheDir}/logs/${DENV_LOG}"
            exit 1
        else
            print_log -sec "shell" -stat "detected :: " "${myShell}"
        fi
    fi

    # Verify the package list has the user packages marker
    if ! grep -q "^#user packages" "${scrDir}/install_pkg.lst"; then
        print_log -sec "pkg" -crit "No user packages found..." "Log file at ${cacheDir}/logs/${DENV_LOG}/install.sh"
        exit 1
    fi

    #--------------------------------#
    # install packages from the list #
    #--------------------------------#
    
    # Execute package installation script with the prepared package list
    "${scrDir}/install_pkg.sh" "${scrDir}/install_pkg.lst"
fi

#---------------------------#
# restore my custom configs #
#---------------------------#

if [ ${flg_Restore} -eq 1 ]; then
    # Display ASCII art for restore phase
    cat <<"EOF"

             _           _
 ___ ___ ___| |_ ___ ___|_|___ ___
|  _| -_|_ -|  _| . |  _| |   | . |
|_| |___|___|_| |___|_| |_|_|_|_  |
                              |___|

EOF

    # Disable Hyprland auto-reload during configuration restore
    # This prevents Hyprland from reloading every time a config file changes
    if [ "${flg_DryRun}" -ne 1 ] && [ -n "$HYPRLAND_INSTANCE_SIGNATURE" ]; then
        # hyprctl is the Hyprland control command
        # -q flag makes it quiet (less output)
        hyprctl keyword misc:disable_autoreload 1 -q
    fi

    # Execute configuration restoration scripts in order
    "${scrDir}/restore_fnt.sh"  # Restore fonts
    "${scrDir}/restore_cfg.sh"  # Restore configuration files
    "${scrDir}/restore_thm.sh"  # Restore themes
    
    # Generate wallpaper cache
    print_log -g "[generate] " "cache ::" "Wallpapers..."
    if [ "${flg_DryRun}" -ne 1 ]; then
        # Add denv's local scripts to PATH
        export PATH="$HOME/.local/lib/denv:${PATH}"
        
        # Generate wallpaper cache (empty string means cache all themes)
        "$HOME/.local/lib/denv/swwwallcache.sh" -t ""
        
        # Switch to default theme (|| true prevents script exit on failure)
        "$HOME/.local/lib/denv/theme.switch.sh" -q || true
        
        echo "[install] reload :: Hyprland"
    fi
fi

#---------------------#
# post-install script #
#---------------------#

# Run post-installation if both install and restore were completed
if [ ${flg_Install} -eq 1 ] && [ ${flg_Restore} -eq 1 ]; then
    # Display ASCII art for post-install phase
    cat <<"EOF"

             _      _         _       _ _
 ___ ___ ___| |_   |_|___ ___| |_ ___| | |
| . | . |_ -|  _|  | |   |_ -|  _| .'| | |
|  _|___|___|_|    |_|_|_|___|_| |__,|_|_|
|_|

EOF

    # Execute post-installation script
    "${scrDir}/install_pst.sh"
fi

#------------------------#
# enable system services #
#------------------------#

if [ ${flg_Service} -eq 1 ]; then
    # Display ASCII art for services phase
    cat <<"EOF"

                 _
 ___ ___ ___ _ _|_|___ ___ ___
|_ -| -_|  _| | | |  _| -_|_ -|
|___|___|_|  \_/|_|___|___|___|

EOF

    # Execute service restoration script
    "${scrDir}/restore_svc.sh"
fi

# Final installation completion messages
if [ $flg_Install -eq 1 ]; then
    echo ""
    print_log -g "Installation" " :: " "COMPLETED!"
fi

# Show where logs are stored
print_log -b "Log" " :: " -y "View logs at ${cacheDir}/logs/${DENV_LOG}"

# Offer to reboot system if any major operations were performed
# Only offer reboot if not in dry run mode
if [ $flg_Install -eq 1 ] ||
    [ $flg_Restore -eq 1 ] ||
    [ $flg_Service -eq 1 ] &&
    [ $flg_DryRun -ne 1 ]; then
    
    print_log -stat "denv" "It is not recommended to use newly installed or upgraded denv without rebooting the system. Do you want to reboot the system? (y/N)"
    read -r answer

    # Check if user wants to reboot
    # [Yy] is a character class matching Y or y
    if [[ "$answer" == [Yy] ]]; then
        echo "Rebooting system"
        systemctl reboot  # Reboot the system
    else
        echo "The system will not reboot"
    fi
fi

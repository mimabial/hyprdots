#!/usr/bin/env bash
# shellcheck disable=SC1091

# xdg resolution
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
export XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
export XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/$(id -u)}"
# ! export XDG_DATA_DIRS="$XDG_DATA_HOME/denv:/usr/local/share/denv/:/usr/share/denv/:$XDG_DATA_DIRS" # Causes issues https://github.com/DENv-Project/DENv/issues/308#issuecomment-2691229673

# denv envs
export DENV_CONFIG_HOME="${XDG_CONFIG_HOME}/denv"
export DENV_DATA_HOME="${XDG_DATA_HOME}/denv"
export DENV_CACHE_HOME="${XDG_CACHE_HOME}/denv"
export DENV_STATE_HOME="${XDG_STATE_HOME}/denv"
export DENV_RUNTIME_DIR="${XDG_RUNTIME_DIR}/denv"
export ICONS_DIR="${XDG_DATA_HOME}/icons"
export FONTS_DIR="${XDG_DATA_HOME}/fonts"
export THEMES_DIR="${XDG_DATA_HOME}/themes"

#legacy denv envs // should be deprecated

export confDir="${XDG_CONFIG_HOME:-$HOME/.config}"
export denvConfDir="$DENV_CONFIG_HOME"
export cacheDir="$DENV_CACHE_HOME"
export thmbDir="$DENV_CACHE_HOME/thumbs"
export dcolDir="$DENV_CACHE_HOME/dcols"
export iconsDir="$ICONS_DIR"
export themesDir="$THEMES_DIR"
export fontsDir="$FONTS_DIR"
export hashMech="sha1sum"

get_hashmap() {
    unset wallHash
    unset wallList
    unset skipStrays
    unset filetypes

    list_extensions() {
        # Define supported file extensions
        supported_files=(
            "gif"
            "jpg"
            "jpeg"
            "png"
            "${WALLPAPER_FILETYPES[@]}"
        )
        if [ -n "${WALLPAPER_OVERRIDE_FILETYPES}" ]; then
            supported_files=("${WALLPAPER_OVERRIDE_FILETYPES[@]}")
        fi

        printf -- "-iname \"*.%s\" -o " "${supported_files[@]}" | sed 's/ -o $//'

    }

    find_wallpapers() {
        local wallSource="$1"

        if [ -z "${wallSource}" ]; then
            print_log -err "ERROR: wallSource is empty"
            return 1
        fi

        local find_command
        find_command="find \"${wallSource}\" -type f \\( $(list_extensions) \\) ! -path \"*/logo/*\" -exec \"${hashMech}\" {} +"

        [ "${LOG_LEVEL}" == "debug" ] && print_log -g "DEBUG:" -b "Running command:" "${find_command}"

        tmpfile=$(mktemp)
        eval "${find_command}" 2>"$tmpfile" | sort -k2
        error_output=$(<"$tmpfile") && rm -f "$tmpfile"
        [ -n "${error_output}" ] && print_log -err "ERROR:" -b "found an error: " -r "${error_output}" -y " skipping..."

    }

    for wallSource in "$@"; do

        [ "${LOG_LEVEL}" == "debug" ] && print_log -g "DEBUG:" -b "arg:" "${wallSource}"

        [ -z "${wallSource}" ] && continue
        [ "${wallSource}" == "--no-notify" ] && no_notify=1 && continue
        [ "${wallSource}" == "--skipstrays" ] && skipStrays=1 && continue
        [ "${wallSource}" == "--verbose" ] && verboseMap=1 && continue

        wallSource="$(realpath "${wallSource}")"

        [ -e "${wallSource}" ] || {
            print_log -err "ERROR:" -b "wallpaper source does not exist:" "${wallSource}" -y " skipping..."
            continue
        }

        [ "${LOG_LEVEL}" == "debug" ] && print_log -g "DEBUG:" -b "wallSource path:" "${wallSource}"

        hashMap=$(find_wallpapers "${wallSource}") # Enable debug mode for testing

        # hashMap=$(
        # find "${wallSource}" -type f \( -iname "*.gif" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.mkv"  \) ! -path "*/logo/*" -exec "${hashMech}" {} + | sort -k2
        # )

        if [ -z "${hashMap}" ]; then
            no_wallpapers+=("${wallSource}")
            print_log -warn "No compatible wallpapers found in: " "${wallSource}"
            continue
        fi

        while read -r hash image; do
            wallHash+=("${hash}")
            wallList+=("${image}")
        done <<<"${hashMap}"
    done

    # Notify the list of directories without compatible wallpapers
    if [ "${#no_wallpapers[@]}" -gt 0 ]; then
        # [ -n "${no_notify}" ] && notify-send -a "DENv Alert" "WARNING: No compatible wallpapers found in: ${no_wallpapers[*]}"
        print_log -warn "No compatible wallpapers found in:" "${no_wallpapers[*]}"
    fi

    if [ -z "${#wallList[@]}" ] || [[ "${#wallList[@]}" -eq 0 ]]; then
        if [[ "${skipStrays}" -eq 1 ]]; then
            return 1
        else
            echo "ERROR: No image found in any source"
            [ -n "${no_notify}" ] && notify-send -a "DENv Alert" "WARNING: No compatible wallpapers found in: ${no_wallpapers[*]}"
            exit 1
        fi
    fi

    if [[ "${verboseMap}" -eq 1 ]]; then
        echo "// Hash Map //"
        for indx in "${!wallHash[@]}"; do
            echo ":: \${wallHash[${indx}]}=\"${wallHash[indx]}\" :: \${wallList[${indx}]}=\"${wallList[indx]}\""
        done
    fi
}

# shellcheck disable=SC2120
get_themes() {
    unset thmSortS
    unset thmListS
    unset thmWallS
    unset thmSort
    unset thmList
    unset thmWall

    while read -r thmDir; do
        local realWallPath
        realWallPath="$(readlink "${thmDir}/wall.set")"
        if [ ! -e "${realWallPath}" ]; then
            get_hashmap "${thmDir}" --skipstrays || continue
            echo "fixing link :: ${thmDir}/wall.set"
            ln -fs "${wallList[0]}" "${thmDir}/wall.set"
        fi
        [ -f "${thmDir}/.sort" ] && thmSortS+=("$(head -1 "${thmDir}/.sort")") || thmSortS+=("0")
        thmWallS+=("${realWallPath}")
        thmListS+=("${thmDir##*/}") # Use this instead of basename
    done < <(find "${DENV_CONFIG_HOME}/themes" -mindepth 1 -maxdepth 1 -type d)

    while IFS='|' read -r sort theme wall; do
        thmSort+=("${sort}")
        thmList+=("${theme}")
        thmWall+=("${wall}")
    done < <(paste -d '|' <(printf "%s\n" "${thmSortS[@]}") <(printf "%s\n" "${thmListS[@]}") <(printf "%s\n" "${thmWallS[@]}") | sort -n -k 1 -k 2)
    #!  done < <(parallel --link echo "{1}\|{2}\|{3}" ::: "${thmSortS[@]}" ::: "${thmListS[@]}" ::: "${thmWallS[@]}" | sort -n -k 1 -k 2) # This is overkill and slow
    if [ "${1}" == "--verbose" ]; then
        echo "// Theme Control //"
        for indx in "${!thmList[@]}"; do
            echo -e ":: \${thmSort[${indx}]}=\"${thmSort[indx]}\" :: \${thmList[${indx}]}=\"${thmList[indx]}\" :: \${thmWall[${indx}]}=\"${thmWall[indx]}\""
        done
    fi
}

[ -f "${DENV_RUNTIME_DIR}/environment" ] && source "${DENV_RUNTIME_DIR}/environment"
[ -f "$DENV_STATE_HOME/staterc" ] && source "$DENV_STATE_HOME/staterc"
[ -f "$DENV_STATE_HOME/config" ] && source "$DENV_STATE_HOME/config"

case "${enableWallDcol}" in
0 | 1 | 2 | 3) ;;
*) enableWallDcol=0 ;;
esac

if [ -z "${DENV_THEME}" ] || [ ! -d "${DENV_CONFIG_HOME}/themes/${DENV_THEME}" ]; then
    get_themes
    DENV_THEME="${thmList[0]}"
fi

DENV_THEME_DIR="${DENV_CONFIG_HOME}/themes/${DENV_THEME}"
wallbashDirs=(
    "${DENV_CONFIG_HOME}/wallbash"
    "${XDG_DATA_HOME}/denv/wallbash"
    "/usr/local/share/denv/wallbash"
    "/usr/share/denv/wallbash"
)

export DENV_THEME \
    DENV_THEME_DIR \
    wallbashDirs \
    enableWallDcol

#// hypr vars

if [ -n "$HYPRLAND_INSTANCE_SIGNATURE" ]; then
    hypr_border="$(hyprctl -j getoption decoration:rounding | jq '.int')"
    hypr_width="$(hyprctl -j getoption general:border_size | jq '.int')"

    export hypr_border=${hypr_border:-0}
    export hypr_width=${hypr_width:-0}
fi

#// extra fns

pkg_installed() {
    local pkgIn=$1
    if command -v "${pkgIn}" &>/dev/null; then
        return 0
    elif command -v "flatpak" &>/dev/null && flatpak info "${pkgIn}" &>/dev/null; then
        return 0
    elif denv-shell pm.sh pq "${pkgIn}" &>/dev/null; then
        return 0
    else
        return 1
    fi
}

get_aurhlpr() {
    if pkg_installed yay; then
        aurhlpr="yay"
    elif pkg_installed paru; then
        # shellcheck disable=SC2034
        aurhlpr="paru"
    fi
}

set_conf() {
    local varName="${1}"
    local varData="${2}"
    touch "${XDG_STATE_HOME}/denv/staterc"

    if [ "$(grep -c "^${varName}=" "${XDG_STATE_HOME}/denv/staterc")" -eq 1 ]; then
        sed -i "/^${varName}=/c${varName}=\"${varData}\"" "${XDG_STATE_HOME}/denv/staterc"
    else
        echo "${varName}=\"${varData}\"" >>"${XDG_STATE_HOME}/denv/staterc"
    fi
}

set_hash() {
    local hashImage="${1}"
    "${hashMech}" "${hashImage}" | awk '{print $1}'
}

print_log() {
    # [ -t 1 ] && return 0 # Skip if not in the terminal
    while (("$#")); do
        # [ "${colored}" == "true" ]
        case "$1" in
        -r | +r)
            echo -ne "\e[31m$2\e[0m" >&2
            shift 2
            ;; # Red
        -g | +g)
            echo -ne "\e[32m$2\e[0m" >&2
            shift 2
            ;; # Green
        -y | +y)
            echo -ne "\e[33m$2\e[0m" >&2
            shift 2
            ;; # Yellow
        -b | +b)
            echo -ne "\e[34m$2\e[0m" >&2
            shift 2
            ;; # Blue
        -m | +m)
            echo -ne "\e[35m$2\e[0m" >&2
            shift 2
            ;; # Magentass
        -c | +c)
            echo -ne "\e[36m$2\e[0m" >&2
            shift 2
            ;; # Cyan
        -wt | +w)
            echo -ne "\e[37m$2\e[0m" >&2
            shift 2
            ;; # White
        -n | +n)
            echo -ne "\e[96m$2\e[0m" >&2
            shift 2
            ;; # Neon
        -stat)
            echo -ne "\e[4;30;46m $2 \e[0m :: " >&2
            shift 2
            ;; # status
        -crit)
            echo -ne "\e[30;41m $2 \e[0m :: " >&2
            shift 2
            ;; # critical
        -warn)
            echo -ne "WARNING :: \e[30;43m $2 \e[0m :: " >&2
            shift 2
            ;; # warning
        +)
            echo -ne "\e[38;5;$2m$3\e[0m" >&2
            shift 3
            ;; # Set color manually
        -sec)
            echo -ne "\e[32m[$2] \e[0m" >&2
            shift 2
            ;; # section use for logs
        -err)
            echo -ne "ERROR :: \e[4;31m$2 \e[0m" >&2
            shift 2
            ;; #error
        *)
            echo -ne "$1" >&2
            shift
            ;;
        esac
    done
    echo "" >&2
}

check_package() {

    local lock_file="${XDG_RUNTIME_DIR:-/tmp}/denv/__package.lock"
    mkdir -p "${XDG_RUNTIME_DIR:-/tmp}/denv"

    if [ -f "$lock_file" ]; then
        return 0
    fi

    for pkg in "$@"; do
        if ! pkg_installed "${pkg}"; then
            print_log -err "Package is not installed" "'${pkg}'"
            rm -f "$lock_file"
            exit 1
        fi
    done

    touch "$lock_file"
}

# OPTIMIZED Function to get configuration values from Hyprland theme files
# This function tries multiple methods to extract config values, with fallbacks
# PERFORMANCE IMPROVEMENTS: Reads file once, uses single awk calls instead of pipes
get_hyprConf() {
    # Get function parameters
    local hyVar="${1}"        # First parameter: variable name to search for
    local file="${2:-"$DENV_THEME_DIR/hypr.theme"}"  # Second parameter: file path (with default)
    
    # The "${2:-default}" syntax means: use $2 if it exists, otherwise use "default"
    
    # ===== METHOD 1: Try using 'hyq' tool (fastest method) =====
    # Check if 'hyq' command exists and is available
    if command -v hyq &>/dev/null; then
        # 'command -v' checks if a command exists
        # '&>/dev/null' redirects both stdout and stderr to nowhere (silence output)
        
        local hyq_result  # Declare local variable to store result
        
        # Try hyq with source option (-s) for accurate results
        # The query looks for variables like "$VARIABLE_NAME"
        hyq_result=$(hyq -s --query "\$${hyVar}" "${file}" 2>/dev/null)
        # '$()' captures command output into variable
        # '2>/dev/null' redirects error messages to nowhere
        
        # If the result is empty, try without source option
        if [ -z "${hyq_result}" ]; then
            # '[ -z "string" ]' tests if string is empty
            hyq_result=$(hyq --query "\$${hyVar}" "${file}" 2>/dev/null)
        fi
        
        # If we got a result, print it and exit successfully
        if [ -n "${hyq_result}" ]; then
            # '[ -n "string" ]' tests if string is NOT empty
            echo "${hyq_result}" && return 0
            # 'return 0' means success, 'return 1' would mean failure
        fi
    fi

    # ===== OPTIMIZATION: Read file once into memory =====
    # Instead of reading the file multiple times in different methods,
    # read it once and store in a variable for all subsequent processing
    local file_content
    file_content=$(cat "${file}" 2>/dev/null)
    
    # If file doesn't exist or can't be read, skip file-based methods
    if [ -z "${file_content}" ]; then
        # Jump directly to fallback methods that don't need this file
        local gsVal=""  # Set empty to trigger fallback logic
    else
        # ===== METHOD 2: OPTIMIZED - Single awk call instead of grep|cut|sed pipeline =====
        # BEFORE: grep "pattern" file | cut -d '=' -f2 | sed 's/pattern//'  (3 processes + 2 pipes)
        # AFTER:  single awk command (1 process, much faster)
        local gsVal
        gsVal=$(echo "${file_content}" | awk -v var="${hyVar}" '
            # awk script explanation:
            # -v var="${hyVar}" passes the variable name into awk as "var"
            # $0 is the entire line, ~ means "matches pattern"
            $0 ~ "^[[:space:]]*\\$" var "[[:space:]]*=" {
                # Found a line like: $VARIABLE = value
                # Remove everything up to and including the = sign
                sub(/^[[:space:]]*\$[^=]*=[[:space:]]*/, "")
                # Remove trailing whitespace
                sub(/[[:space:]]*$/, "")
                # Print the cleaned value and exit (first match wins)
                print
                exit
            }
        ')
        
        # If we found a value and it doesn't start with $, use it
        if [ -n "${gsVal}" ] && [[ "${gsVal}" != \$* ]]; then
            # '[[ string != pattern ]]' is pattern matching
            # '\$*' means "starts with $ followed by anything"
            echo "${gsVal}" && return 0
        fi
        
        # ===== METHOD 3: OPTIMIZED - Map variables to gsettings keys =====
        # Create an associative array (like a dictionary/hash map)
        declare -A gsMap=(
            [GTK_THEME]="gtk-theme"
            [ICON_THEME]="icon-theme"
            [COLOR_SCHEME]="color-scheme"
            [CURSOR_THEME]="cursor-theme"
            [CURSOR_SIZE]="cursor-size"
            [FONT]="font-name"
            [DOCUMENT_FONT]="document-font-name"
            [MONOSPACE_FONT]="monospace-font-name"
            [FONT_SIZE]="font-size"
            [DOCUMENT_FONT_SIZE]="document-font-size"
            [MONOSPACE_FONT_SIZE]="monospace-font-size"
        )

        # Try to parse gsettings commands if our variable maps to a gsettings key
        if [[ -n "${gsMap[$hyVar]}" ]]; then
            # Check if our variable exists in the gsMap array
            # OPTIMIZATION: Use the file_content we already read, single awk call
            gsVal=$(echo "${file_content}" | awk -F"[\"']" -v gskey="${gsMap[$hyVar]}" '
                # awk script explanation:
                # -F sets field separator to quotes (single or double)
                # -v gskey passes the gsettings key into awk
                # Look for lines like: exec = gsettings set org.gnome.desktop.interface gtk-theme "value"
                $0 ~ "^[[:space:]]*exec[[:space:]]*=[[:space:]]*gsettings[[:space:]]*set[[:space:]]*org.gnome.desktop.interface[[:space:]]*" gskey "[[:space:]]*" {
                    # Found matching gsettings line
                    # $2 contains the value between quotes (due to field separator)
                    last = $2
                }
                END {
                    # Print the last match found (in case there are multiple)
                    if (last) print last
                }
            ')
            
            # Breaking down this optimized awk command:
            # 1. We pass the gsettings key as a variable to avoid complex string concatenation
            # 2. We use the file_content we already read instead of reading file again
            # 3. Single awk process instead of the original complex pipeline
        fi
    fi

    # ===== METHOD 4: OPTIMIZED Final fallbacks =====
    # If still no value found, or if value starts with $
    if [ -z "${gsVal}" ] || [[ "${gsVal}" == \$* ]]; then
        # Use a case statement to handle special variables
        case "${hyVar}" in
            "CODE_THEME") 
                echo "Wallbash"    # Hardcoded default
                ;;
            "SDDM_THEME") 
                echo ""            # Empty default
                ;;
            *)  
                # For all other variables, search in multiple config files
                # OPTIMIZATION: REPLACED grep|cut|sed|head PIPELINE WITH SINGLE AWK
                # 
                # ORIGINAL CODE (SLOW - 4 processes + 3 pipes):
                # grep "^[[:space:]]*\$default.${hyVar}\s*=" \
                #     "file1" "file2" "file3" "file4" "file5" "file6" 2>/dev/null |
                #     cut -d '=' -f2 | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | head -n 1
                #
                # NEW CODE (FAST - 1 process, 0 pipes):
                
                # Array of possible config file locations
                local config_files=(
                    "XDG_DATA_HOME/denv/denv.conf"
                    "$XDG_DATA_HOME/denv/hyprland.conf"
                    "/usr/local/share/denv/denv.conf"
                    "/usr/local/share/denv/hyprland.conf"
                    "/usr/share/denv/denv.conf"
                    "/usr/share/denv/hyprland.conf"
                )
                
                # Single awk call replaces the entire grep|cut|sed|head pipeline
                awk -v var="${hyVar}" '
                    # Look for lines like: $default.VARIABLE = value
                    $0 ~ "^[[:space:]]*\\$default\\." var "[[:space:]]*=" {
                        # Remove everything up to and including the = sign
                        sub(/^[[:space:]]*\$default\.[^=]*=[[:space:]]*/, "")
                        # Remove trailing whitespace  
                        sub(/[[:space:]]*$/, "")
                        # Print the value and exit immediately (replaces head -n 1)
                        print
                        exit
                    }
                ' "${config_files[@]}" 2>/dev/null
                
                # Why this awk approach is much faster:
                # BEFORE: grep reads all files → cut processes all matches → sed cleans all → head takes first
                # AFTER:  awk reads files sequentially and exits on FIRST match (no unnecessary processing)
                ;;
        esac
    else
        # If we found a value through gsettings parsing, use it
        echo "${gsVal}"
    fi
}

# rofi spawn location
get_rofi_pos() {
    readarray -t curPos < <(hyprctl cursorpos -j | jq -r '.x,.y')
    eval "$(hyprctl -j monitors | jq -r '.[] | select(.focused==true) |
        "monRes=(\(.width) \(.height) \(.scale) \(.x) \(.y)) offRes=(\(.reserved | join(" ")))"')"

    monRes[2]="${monRes[2]//./}"
    monRes[0]=$((monRes[0] * 100 / monRes[2]))
    monRes[1]=$((monRes[1] * 100 / monRes[2]))
    curPos[0]=$((curPos[0] - monRes[3]))
    curPos[1]=$((curPos[1] - monRes[4]))
    offRes=("${offRes// / }")

    if [ "${curPos[0]}" -ge "$((monRes[0] / 2))" ]; then
        local x_pos="east"
        local x_off="-$((monRes[0] - curPos[0] - offRes[2]))"
    else
        local x_pos="west"
        local x_off="$((curPos[0] - offRes[0]))"
    fi

    if [ "${curPos[1]}" -ge "$((monRes[1] / 2))" ]; then
        local y_pos="south"
        local y_off="-$((monRes[1] - curPos[1] - offRes[3]))"
    else
        local y_pos="north"
        local y_off="$((curPos[1] - offRes[1]))"
    fi

    local coordinates="window{location:${x_pos} ${y_pos};anchor:${x_pos} ${y_pos};x-offset:${x_off}px;y-offset:${y_off}px;}"
    echo "${coordinates}"
}

#? handle pasting
paste_string() {
    if ! command -v wtype >/dev/null; then exit 0; fi
    ignore_paste_file="$DENV_STATE_HOME/ignore.paste"

    if [[ ! -e "${ignore_paste_file}" ]]; then
        cat <<EOF >"${ignore_paste_file}"
kitty
org.kde.konsole
terminator
XTerm
Alacritty
xterm-256color
EOF
    fi

    ignore_class=$(echo "$@" | awk -F'--ignore=' '{print $2}')
    [ -n "${ignore_class}" ] && echo "${ignore_class}" >>"${ignore_paste_file}" && print_prompt -y "[ignore]" "'$ignore_class'" && exit 0
    class=$(hyprctl -j activewindow | jq -r '.initialClass')
    if ! grep -q "${class}" "${ignore_paste_file}"; then
        hyprctl -q dispatch exec 'wtype -M ctrl V -m ctrl'
    fi
}

#? Checks if the cursor is hovered on a window
is_hovered() {
    data=$(hyprctl --batch -j "cursorpos;activewindow" | jq -s '.[0] * .[1]')
    # evaulate the output of the JSON data into shell variables
    eval "$(echo "$data" | jq -r '@sh "cursor_x=\(.x) cursor_y=\(.y) window_x=\(.at[0]) window_y=\(.at[1]) window_size_x=\(.size[0]) window_size_y=\(.size[1])"')"

    # Handle variables in case they are null
    cursor_x=${cursor_x:-$(jq -r '.x // 0' <<<"$data")}
    cursor_y=${cursor_y:-$(jq -r '.y // 0' <<<"$data")}
    window_x=${window_x:-$(jq -r '.at[0] // 0' <<<"$data")}
    window_y=${window_y:-$(jq -r '.at[1] // 0' <<<"$data")}
    window_size_x=${window_size_x:-$(jq -r '.size[0] // 0' <<<"$data")}
    window_size_y=${window_size_y:-$(jq -r '.size[1] // 0' <<<"$data")}
    # Check if the cursor is hovered in the active window
    if ((cursor_x >= window_x && cursor_x <= window_x + window_size_x && cursor_y >= window_y && cursor_y <= window_y + window_size_y)); then
        return 0
    fi
    return 1
}

toml_write() {
    # Use kwriteconfig6 to write to config files in toml format
    local config_file=$1
    local group=$2
    local key=$3
    local value=$4

    if ! kwriteconfig6 --file "${config_file}" --group "${group}" --key "${key}" "${value}" 2>/dev/null; then
        if ! grep -q "^\[${group}\]" "${config_file}"; then
            echo -e "\n[${group}]\n${key}=${value}" >>"${config_file}"
        elif ! grep -q "^${key}=" "${config_file}"; then
            sed -i "/^\[${group}\]/a ${key}=${value}" "${config_file}"
        fi
    fi
}

# Function to extract thumbnail from video
# shellcheck disable=SC2317
extract_thumbnail() {
    local x_wall="${1}"
    x_wall=$(realpath "${x_wall}")
    local temp_image="${2}"
    ffmpeg -y -i "${x_wall}" -vf "thumbnail,scale=1000:-1" -frames:v 1 -update 1 "${temp_image}" &>/dev/null
}

# Function to check if the file is supported by the wallpaper backend
accepted_mime_types() {
    local mime_types_array=${1}
    local file=${2}

    for mime_type in "${mime_types_array[@]}"; do
        if file --mime-type -b "${file}" | grep -q "^${mime_type}"; then
            return 0
        else
            print_log err "File type not supported for this wallpaper backend."
            notify-send -u critical -a "DENv-Alert" "File type not supported for this wallpaper backend."
        fi

    done

}

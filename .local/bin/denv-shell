#!/usr/bin/env bash
# This script will soon be used to resolve $PATHS and LIB_DIR specific to denv
# wallbash script can source this script to resolve the paths cleanly on a separate shell

if [[ -z "${BASH_SOURCE[0]}" ]]; then
    EXECUTABLE="${0}"
else
    EXECUTABLE="${BASH_SOURCE[0]}"
fi

BIN_DIR=$(dirname "$(which "${EXECUTABLE:-denv-shell}")")
LIB_DIR=$(realpath "${BIN_DIR}/../lib")
SHARE_DIR=$(realpath "${BIN_DIR}/../share")
PATH="$BIN_DIR:$LIB_DIR/denv:$PATH" #! I added this to the PATH to make sure that the denv commands are available in the shell
# Define denv scripts search paths (colon-separated, user configurable)
DENV_SCRIPTS_PATH="${DENV_SCRIPTS_PATH:-${XDG_CONFIG_HOME:-$HOME/.config}/denv/scripts:${LIB_DIR}/denv}"

export BIN_DIR LIB_DIR SHARE_DIR

# shellcheck disable=SC1091
if ! source "${LIB_DIR}/denv/globalcontrol.sh"; then
    echo "Error: Could not load DENv, broken installation?"
    exit 1
fi

USAGE() {

    cat <<USAGE
Usage: $(basename "$0") [command]
Commands:
  --help, help, -h : Display this help message
  -i, interactive  : Start an interactive shell
  -r, reload       : Reload DENv
  zoom             : Zoom in/out Hyprland
  wallbash         : Execute a wallbash script

Available DENv commands:

$(list_script)

USAGE

}

call_wallbashScript() {
    local scriptName=$1
    shift
    local args=("${@}")
    local dirs=("${wallbashDirs[@]}")
    sanitized_dirs=()
    for dir in "${dirs[@]}"; do
        if [[ -d "$dir" ]]; then
            sanitized_dirs+=("$dir")
        fi
    done
    dirs=("${sanitized_dirs[@]}")
    script_path=$(find "${dirs[@]}" -type f -path "*/scripts/*" -name "${scriptName}.sh" -exec echo {} \; -quit)

    for func in $(compgen -A function); do
        export -f "${func?}"
    done

    if [[ -n "$script_path" ]]; then
        "$script_path" "${args[@]}"
    else
        case $scriptName in
        *)
            echo "Usage: wallbash [script-name] [args]"
            echo "Executes the specified wallbash script with the provided arguments."
            echo "Available scripts:"
            for dir in "${dirs[@]}"; do
                if [[ -d "$dir" ]]; then
                    echo -e "\n[ $dir ]"
                    find "$dir" -type f -path "*/scripts/*" -name "*.sh" -exec basename {} \;
                fi
            done
            ;;
        esac
    fi

}

denv_reload() {

    print_log -sec "denv" "Reloading DENv"
    "$LIB_DIR/denv/swwwallcache.sh" -t ""
    "$LIB_DIR/denv/theme.switch.sh"
}

list_script() {
    find "$LIB_DIR/denv" -type f \( -name "*.sh" -o -name "*.py" \) -exec basename {} \;
    # Use SCRIPTS_PATH to find scripts from all configured directories
    local DENV_SCRIPTS_PATH="${DENV_SCRIPTS_PATH:-${XDG_CONFIG_HOME:-$HOME/.config}/denv/scripts:${LIB_DIR}/denv}"

    # Convert to array, deduplicate, and filter out empty entries
    IFS=':' read -ra RAW_DIRS <<<"$DENV_SCRIPTS_PATH"
    declare -A seen_dirs
    local SCRIPT_DIRS=()
    for dir in "${RAW_DIRS[@]}"; do
        # Skip empty entries (handles multiple colons like :::)
        [[ -z "$dir" ]] && continue
        # Deduplicate directories
        [[ -n "${seen_dirs[$dir]}" ]] && continue
        seen_dirs["$dir"]=1
        # Only add existing directories
        [[ -d "$dir" ]] && SCRIPT_DIRS+=("$dir")
    done

    # Find scripts in all configured directories
    for dir in "${SCRIPT_DIRS[@]}"; do
        find "$dir" -maxdepth 1 -type f \( -name "*.sh" -o -name "*.py" \) -exec basename {} \; 2>/dev/null
    done | sort -u
}

get_completion_data() {
    # Get all available commands and scripts
    local built_in_commands=("--help" "help" "-h" "-r" "reload" "wallbash" "--version" "version" "-v" "--release-notes" "release-notes" "--list-script" "--list-script-path" "--completions")
    local denv_scripts=()
    local wallbash_scripts=()

    # Get DENv scripts (remove extensions)
    while IFS= read -r script; do
        if [[ -n "$script" ]]; then
            script_name="${script%.*}"
            denv_scripts+=("$script_name")
        fi
    done < <(list_script 2>/dev/null | sort -u)

    # Get wallbash scripts
    local dirs=("${wallbashDirs[@]}")
    wallbash_scripts=("--help") # Add --help as first option
    # Simplified - just --help for now since dynamic parsing is complex

    # Export arrays for use by completion generators
    export DENV_BUILT_IN_COMMANDS="${built_in_commands[*]}"
    export DENV_SCRIPTS="${denv_scripts[*]}"
    export DENV_WALLBASH_SCRIPTS="${wallbash_scripts[*]}"
}

gen_bash_completion() {
    get_completion_data

    cat <<'BASH_COMPLETION'
# Bash completion for denv-shell
_denv_shell_completion() {
    local cur prev words cword
    _init_completion 2>/dev/null || {
        COMPREPLY=()
        cur="${COMP_WORDS[COMP_CWORD]}"
        prev="${COMP_WORDS[COMP_CWORD-1]}"
    }
    
    local built_in_commands denv_scripts wallbash_scripts
    built_in_commands="--help help -h -r reload wallbash --version version -v --release-notes release-notes --list-script --list-script-path --completions"
    
    # Get dynamic completions from denv-shell
    if command -v denv-shell >/dev/null 2>&1; then
        denv_scripts=$(denv-shell --list-script 2>/dev/null | sed 's/\.[^.]*$//' | tr '\n' ' ')
        
        # Get wallbash scripts - just --help for now
        wallbash_scripts="--help"
    fi
    
    # Only provide completions for the first argument
    if [[ $COMP_CWORD -eq 1 ]]; then
        # First argument: complete with all available commands
        local all_commands="$built_in_commands $denv_scripts"
        COMPREPLY=($(compgen -W "$all_commands" -- "$cur"))
    elif [[ $COMP_CWORD -eq 2 ]]; then
        # Second argument: only for specific commands that take arguments
        case $prev in
            wallbash)
                COMPREPLY=($(compgen -W "$wallbash_scripts" -- "$cur"))
                return 0
                ;;
            --completions)
                COMPREPLY=($(compgen -W "bash zsh fish" -- "$cur"))
                return 0
                ;;
            *)
                # No completion for other commands
                COMPREPLY=()
                return 0
                ;;
        esac
    else
        # No completion for 3rd argument and beyond
        COMPREPLY=()
        return 0
    fi
}

complete -F _denv_shell_completion denv-shell
BASH_COMPLETION
}

gen_zsh_completion() {
    get_completion_data

    cat <<'ZSH_COMPLETION'
#compdef denv-shell

_denv_shell() {
    local cur prev words
    cur="${words[CURRENT]}"
    prev="${words[CURRENT-1]}"
    
    local built_in_commands denv_scripts wallbash_scripts
    built_in_commands=("--help" "help" "-h" "-r" "reload" "wallbash" "--version" "version" "-v" "--release-notes" "release-notes" "--list-script" "--list-script-path" "--completions")
    
    # Get dynamic completions
    if (( $+commands[denv-shell] )); then
        local scripts_raw
        scripts_raw=(${(f)"$(denv-shell --list-script 2>/dev/null)"})
        denv_scripts=(${scripts_raw[@]%.*})  # Remove extensions
        
        # Get wallbash scripts - just --help for now
        wallbash_scripts=("--help")
    fi
    
    # Only complete for first two arguments max
    if [[ $CURRENT -eq 2 ]]; then
        # First argument: all commands
        local all_commands=($built_in_commands $denv_scripts)
        compadd -a all_commands
    elif [[ $CURRENT -eq 3 ]]; then
        # Second argument: only for specific commands
        case $words[2] in
            wallbash)
                compadd -a wallbash_scripts
                return 0
                ;;
            --completions)
                compadd "bash" "zsh" "fish"
                return 0
                ;;
            *)
                # No completion for other commands
                return 0
                ;;
        esac
    else
        # No completion for 3rd argument and beyond
        return 0
    fi
}

compdef _denv_shell denv-shell
ZSH_COMPLETION
}

gen_fish_completion() {
    get_completion_data

    cat <<'FISH_COMPLETION'
# Fish completion for denv-shell

function __denv_shell_get_commands
    echo "--help
help
-h
-r
reload
wallbash
--list-script
--list-script-path
--completions"
    
    # Get denv scripts
    if command -v denv-shell >/dev/null 2>&1
        denv-shell --list-script 2>/dev/null | sed 's/\.[^.]*$//'
    end
end

function __denv_shell_get_wallbash_scripts
    # Just --help for now
    echo "--help"
end

# Main completions
complete -c denv-shell -f

# First argument completions
complete -c denv-shell -n "not __fish_seen_subcommand_from (__denv_shell_get_commands)" -a "(__denv_shell_get_commands)" -d "DENv shell commands"

# Wallbash subcommand completions
complete -c denv-shell -n "__fish_seen_subcommand_from wallbash" -a "(__denv_shell_get_wallbash_scripts)" -d "Wallbash scripts"

# Completions subcommand
complete -c denv-shell -n "__fish_seen_subcommand_from --completions" -a "bash zsh fish" -d "Shell completion types"

# Option descriptions
complete -c denv-shell -s h -l help -d "Display help message"
complete -c denv-shell -s r -d "Reload DENv"
complete -c denv-shell -l list-script -d "List available scripts"
complete -c denv-shell -l list-script-path -d "List scripts with full paths"
complete -c denv-shell -l completions -d "Generate shell completions"
FISH_COMPLETION
}

generate_completions() {
    local shell_type="$1"

    case "$shell_type" in
    bash)
        gen_bash_completion
        ;;
    zsh)
        gen_zsh_completion
        ;;
    fish)
        gen_fish_completion
        ;;
    *)
        echo "Usage: denv-shell --completions [bash|zsh|fish]"
        echo "Generate shell completions for the specified shell"
        return 1
        ;;
    esac
}

run_command() {

    # Convert to array, deduplicate, and filter out empty entries
    IFS=':' read -ra RAW_DIRS <<<"$DENV_SCRIPTS_PATH"
    declare -A seen_dirs
    SCRIPT_DIRS=()
    for dir in "${RAW_DIRS[@]}"; do
        # Skip empty entries (handles multiple colons like :::)
        [[ -z "$dir" ]] && continue
        # Deduplicate directories
        [[ -n "${seen_dirs[$dir]}" ]] && continue
        seen_dirs["$dir"]=1
        # Only add existing directories
        [[ -d "$dir" ]] && SCRIPT_DIRS+=("$dir")
    done

    # Try to find and execute the command in priority order
    for dir in "${SCRIPT_DIRS[@]}"; do
        # Try .sh extension first
        if [[ -f "$dir/${1}.sh" ]]; then
            exec bash "$dir/${1}.sh" "${@:2}"
        # Try .py extension
        elif [[ -f "$dir/${1}.py" ]]; then
            exec python "$dir/${1}.py" "${@:2}"
        # Try exact name (executable)
        elif [[ -f "$dir/${1}" && -x "$dir/${1}" ]]; then
            exec "$dir/${1}" "${@:2}"
        fi
    done

    # Finally try as a direct file path
    if [[ -f "$1" && -x "$1" ]]; then
        exec "$1" "${@:2}"
    else
        echo "Command not found: $1"
        echo "Available commands:"
        list_script
        # Show user scripts from all configured directories
        for dir in "${SCRIPT_DIRS[@]}"; do
            echo "Scripts in $dir:"
            find "$dir" -maxdepth 1 -type f \( -name "*.sh" -o -name "*.py" -o -executable \) -exec basename {} \; 2>/dev/null | sort
        done
    fi
}

if [[ ! "${BASH_SOURCE[0]}" != "${0}" ]]; then

    case $1 in
    -r | reload)
        denv_reload
        ;;
    wallbash)
        shift
        call_wallbashScript "$@"
        ;;
    --help | help | -h)
        USAGE
        ;;
    --list-script)
        list_script
        ;;
    --list-script-path)
        find "$LIB_DIR/denv" -type f \( -name "*.sh" -o -name "*.py" \) -exec echo {} \;
        ;;
    --completions)
        shift
        generate_completions "$1"
        ;;
    "")
        for func in $(compgen -A function); do
            export -f "${func?}"
        done
        ;;
    *)
        run_command "$@"
        ;;
    esac

fi
